trigger:
  branches:
    include:
      - master
      - develop
  paths:
    include:
      - MaartenH.Minor.Miffy.AuditLogging
      - MaartenH.Minor.Miffy.AuditLogging.Server
      - azure-pipelines.yaml

variables:
  buildConfiguration: 'Release'
  projects: |
    MaartenH.Minor.Miffy.AuditLogging/MaartenH.Minor.Miffy.AuditLogging.csproj
    MaartenH.Minor.Miffy.AuditLogging.Server/MaartenH.Minor.Miffy.AuditLogging.Server.csproj
  testProjects: |
    MaartenH.Minor.Miffy.AuditLogging.Test
    MaartenH.Minor.Miffy.AuditLogging.Server.Test
  integrationTestProjects: |
    **/*.Integration/*.csproj
  projectKey: MaartenH:Miffy-AuditLogging
  projectName: MaartenH Miffy AuditLogging

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: SonarQubePrepare@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'
              scannerMode: 'MSBuild'
              projectKey: $(projectKey)
              projectName: $(projectName)

          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: $(projects)
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: $(testProjects)
              arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'

          - task: SonarQubeAnalyze@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
          - task: SonarQubePublish@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              pollingTimeoutSec: '300'
          - task: sonar-buildbreaker@8
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'

# TODO: Re-enable later
#  - stage: Integration
#    displayName: Integration Tests
#    dependsOn: Build
#    jobs:
#      - job: Integration
#        displayName: Integration Tests
#        pool:
#          vmImage: 'ubuntu-latest'
#        steps:
#          # Not the cleanest way, but it works and it means I don't need a running server
#          - bash: |
#              docker run -d -p 5672:5672 --name rabbitmq rabbitmq:3-alpine
#            displayName: 'docker run rabbitmq'
#
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet test'
#            inputs:
#              command: test
#              projects: $(integrationTestProjects)
#              arguments: '--configuration $(BuildConfiguration)'
#
#  - stage: Release
#    displayName: Release
#    dependsOn: Integration
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#    jobs:
#      - job: Release
#        displayName: Release
#        pool:
#          vmImage: 'ubuntu-latest'
#        steps:
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet pack'
#            inputs:
#              command: 'pack'
#              packagesToPack: '**/*.csproj'
#              patchVersion: $(Build.BuildId)
#
#          - task: NuGetCommand@2
#            displayName: 'nuget.org nuget push'
#            inputs:
#              allowPackageConflicts: true
#              command: 'push'
#              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#              nuGetFeedType: 'external'
#              publishFeedCredentials: 'NuGet feed'
