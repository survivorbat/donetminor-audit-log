trigger:
  branches:
    include:
      - master
      - develop
  paths:
    include:
      - src/MaartenH.Minor.Miffy.AuditLogging
      - src/MaartenH.Minor.Miffy.AuditLogging.Server
      - azure-pipelines.yaml

variables:
  imageRepository: 'maartenh-miffy-auditlogger'
  dockerRegistry: 'DockerHub'
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'
  projects: |
    src/MaartenH.Minor.Miffy.AuditLogging/MaartenH.Minor.Miffy.AuditLogging.csproj
    src/MaartenH.Minor.Miffy.AuditLogging.Server/MaartenH.Minor.Miffy.AuditLogging.Server.csproj
  dockerProjects: |
    src/MaartenH.Minor.Miffy.AuditLogging.Server/MaartenH.Minor.Miffy.AuditLogging.Server.csproj
  testProjects: |
    src/MaartenH.Minor.Miffy.AuditLogging.Test
    src/MaartenH.Minor.Miffy.AuditLogging.Server.Test
  integrationTestProjects: |
    **/*.Integration/*.csproj
  projectKey: MaartenH:Miffy-AuditLogging
  projectName: MaartenH Miffy AuditLogging

stages:
#  - stage: Build
#    displayName: Build
#    jobs:
#      - job: Build
#        displayName: Build
#        pool:
#          vmImage: 'windows-latest'
#        steps:
#          - task: SonarQubePrepare@4
#            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
#            inputs:
#              SonarQube: 'SonarQube Service Connection'
#              scannerMode: 'MSBuild'
#              projectKey: $(projectKey)
#              projectName: $(projectName)
#              extraProperties: sonar.exclusions=**\*.js,**\bootstrap*.css,**\DataTables\**\*.css,**\roslyn\*,**\Global.asax.cs,**\Migrations\**,**\DAL\LeaseBedrijfDataConfiguration.cs
#
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet build'
#            inputs:
#              projects: $(projects)
#              arguments: '--configuration $(BuildConfiguration)'
#
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet test'
#            inputs:
#              command: test
#              projects: $(testProjects)
#              arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'
#
#          - task: SonarQubeAnalyze@4
#            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
#          - task: SonarQubePublish@4
#            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
#            inputs:
#              pollingTimeoutSec: '300'
#          - task: sonar-buildbreaker@8
#            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
#            inputs:
#              SonarQube: 'SonarQube Service Connection'
#
#  - stage: Integration
#    displayName: Integration Tests
#    dependsOn: Build
#    jobs:
#      - job: Integration
#        displayName: Integration Tests
#        pool:
#          vmImage: 'ubuntu-latest'
#        steps:
#          # Not the cleanest way, but it works and it means I don't need a running server
#          - bash: |
#              docker run -d -p 5672:5672 --name rabbitmq rabbitmq:3-alpine
#              docker run -d -p 3312:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7.28
#            displayName: 'Start test containers'
#
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet test'
#            inputs:
#              command: test
#              projects: $(integrationTestProjects)
#              arguments: '--configuration $(BuildConfiguration)'
#            env:
#              DB_CONNECTION_STRING: "DataSource=localhost;Database=TestDb;Username=root;Password=root;Port=3312;"
#              BROKER_CONNECTION_STRING: "amqp://guest:guest@localhost"
#              BROKER_EXCHANGE_NAME: "TestExchange"
#
  - stage: Release
    displayName: Release
    dependsOn: Integration
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
#      - job: ReleaseNuGet
#        displayName: Release NuGet
#        pool:
#          vmImage: 'ubuntu-latest'
#        steps:
#          - task: DotNetCoreCLI@2
#            displayName: 'dotnet pack'
#            inputs:
#              command: 'pack'
#              packagesToPack: '**/*.csproj'
#              patchVersion: $(Build.BuildId)
#
#          - task: NuGetCommand@2
#            displayName: 'nuget.org nuget push'
#            inputs:
#              allowPackageConflicts: true
#              command: 'push'
#              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#              nuGetFeedType: 'external'
#              publishFeedCredentials: 'NuGet feed'
      - job: ReleaseDocker
        displayName: Release Docker Image
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: publish
              publishWebProjects: false
              projects: $(dockerProjects)
              arguments: '--configuration Release --self-contained -f "netcoreapp3.0" -r "linux-x64" --output "$(projectPath)/obj/Docker/publish"'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistry)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(projectPath)/Dockerfile'
              tags: $(tag)

